
ArduinoControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000022a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000947  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000751  00000000  00000000  00000cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000427  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000148  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000474  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000252  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000205a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_3>
  10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  9e:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initPCINT0>:
//************************************************************
//                 Functions
//************************************************************

void initPCINT0(void){
	PCICR |= (1 << PCIE0);		//pin change
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0) | (1 << PCINT1) | (1 << PCINT2) | (1 << PCINT3);	//mask
  b0:	eb e6       	ldi	r30, 0x6B	; 107
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <initPCINT1>:
}

void initPCINT1(void){
	PCICR |= (1 << PCIE1);	
  bc:	e8 e6       	ldi	r30, 0x68	; 104
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT13);
  c6:	ec e6       	ldi	r30, 0x6C	; 108
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 63       	ori	r24, 0x30	; 48
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <main>:
void initPCINT0(void);
void initPCINT1(void);

int main(void)
{
	cli();
  d2:	f8 94       	cli
	
	PORTB |= (1 <<  PINB0) | (1 << PINB1) | (1 <<  PINB2) | (1 <<  PINB3);		//pins of PORTB as input w pull up
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8f 60       	ori	r24, 0x0F	; 15
  d8:	85 b9       	out	0x05, r24	; 5
	DDRB = 0x00;																//inputs and ouputs
  da:	14 b8       	out	0x04, r1	; 4
	//PORTB |= (1 << PORTB5);													// Turn on integrated LED
	
	PORTC |= (1 << PINC4) | (1 << PINC5);										//pins of PORTB as input w pull up
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	80 63       	ori	r24, 0x30	; 48
  e0:	88 b9       	out	0x08, r24	; 8
	DDRC = 0x0F;																//inputs and outputs
  e2:	8f e0       	ldi	r24, 0x0F	; 15
  e4:	87 b9       	out	0x07, r24	; 7
	
	initPCINT0();
  e6:	0e 94 53 00 	call	0xa6	; 0xa6 <initPCINT0>
	initPCINT1();
  ea:	0e 94 5e 00 	call	0xbc	; 0xbc <initPCINT1>
	initUART9600();
  ee:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <initUART9600>
	sei();
  f2:	78 94       	sei
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <main+0x22>

000000f6 <__vector_3>:
//************************************************************
//                 Interruptions
//************************************************************

// Directions
ISR (PCINT0_vect){
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	ef 93       	push	r30
 116:	ff 93       	push	r31
	if (!(PINB & (1 << PINB0)))	writeTextUART("0");		// Arriba
 118:	18 99       	sbic	0x03, 0	; 3
 11a:	04 c0       	rjmp	.+8      	; 0x124 <__vector_3+0x2e>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <writeTextUART>
	if (!(PINB & (1 << PINB1)))	writeTextUART("1");		// Abajo
 124:	19 99       	sbic	0x03, 1	; 3
 126:	04 c0       	rjmp	.+8      	; 0x130 <__vector_3+0x3a>
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <writeTextUART>
	if (!(PINB & (1 << PINB2)))	writeTextUART("2");		// Izquierda
 130:	1a 99       	sbic	0x03, 2	; 3
 132:	04 c0       	rjmp	.+8      	; 0x13c <__vector_3+0x46>
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <writeTextUART>
	if (!(PINB & (1 << PINB3)))	writeTextUART("3");		// Derecha
 13c:	1b 99       	sbic	0x03, 3	; 3
 13e:	04 c0       	rjmp	.+8      	; 0x148 <__vector_3+0x52>
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <writeTextUART>
}
 148:	ff 91       	pop	r31
 14a:	ef 91       	pop	r30
 14c:	bf 91       	pop	r27
 14e:	af 91       	pop	r26
 150:	9f 91       	pop	r25
 152:	8f 91       	pop	r24
 154:	7f 91       	pop	r23
 156:	6f 91       	pop	r22
 158:	5f 91       	pop	r21
 15a:	4f 91       	pop	r20
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_4>:

// Actions
ISR(PCINT1_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	if (!(PINC & (1 << PINC4))) writeTextUART("4");		// Acción 1
 18c:	34 99       	sbic	0x06, 4	; 6
 18e:	04 c0       	rjmp	.+8      	; 0x198 <__vector_4+0x2e>
 190:	88 e0       	ldi	r24, 0x08	; 8
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <writeTextUART>
	if (!(PINC & (1 << PINC5))) writeTextUART("5");		// Acción 2
 198:	35 99       	sbic	0x06, 5	; 6
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <__vector_4+0x3a>
 19c:	8a e0       	ldi	r24, 0x0A	; 10
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <writeTextUART>
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <writeTextUART>:
 1c6:	ac 01       	movw	r20, r24
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <writeTextUART+0x14>
 1cc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1d0:	95 ff       	sbrs	r25, 5
 1d2:	fc cf       	rjmp	.-8      	; 0x1cc <writeTextUART+0x6>
 1d4:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1d8:	2f 5f       	subi	r18, 0xFF	; 255
 1da:	fa 01       	movw	r30, r20
 1dc:	e2 0f       	add	r30, r18
 1de:	f1 1d       	adc	r31, r1
 1e0:	30 81       	ld	r19, Z
 1e2:	31 11       	cpse	r19, r1
 1e4:	f3 cf       	rjmp	.-26     	; 0x1cc <writeTextUART+0x6>
 1e6:	08 95       	ret

000001e8 <initUART9600>:
 1e8:	8a b1       	in	r24, 0x0a	; 10
 1ea:	8e 7f       	andi	r24, 0xFE	; 254
 1ec:	8a b9       	out	0x0a, r24	; 10
 1ee:	8a b1       	in	r24, 0x0a	; 10
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	8a b9       	out	0x0a, r24	; 10
 1f4:	e0 ec       	ldi	r30, 0xC0	; 192
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	10 82       	st	Z, r1
 1fa:	80 81       	ld	r24, Z
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	80 83       	st	Z, r24
 200:	e1 ec       	ldi	r30, 0xC1	; 193
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	10 82       	st	Z, r1
 206:	80 81       	ld	r24, Z
 208:	88 69       	ori	r24, 0x98	; 152
 20a:	80 83       	st	Z, r24
 20c:	e2 ec       	ldi	r30, 0xC2	; 194
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	10 82       	st	Z, r1
 212:	80 81       	ld	r24, Z
 214:	86 60       	ori	r24, 0x06	; 6
 216:	80 83       	st	Z, r24
 218:	8f ec       	ldi	r24, 0xCF	; 207
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 220:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 224:	08 95       	ret

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
